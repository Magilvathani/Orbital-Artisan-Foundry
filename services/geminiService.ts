import { GoogleGenAI, Type, Modality } from "@google/genai";
import { GeneratedComponentDetails } from '../types';

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const responseSchema = {
  type: Type.OBJECT,
  properties: {
    material: {
      type: Type.STRING,
      description: "A plausible-sounding futuristic alloy or composite material for the object.",
    },
    manufacturingProcess: {
      type: Type.STRING,
      description: "A brief description of the unique in-space manufacturing technique used.",
    },
    keyFeatures: {
      type: Type.ARRAY,
      items: {
        type: Type.STRING,
      },
      description: "An array of 3-4 bullet points highlighting the object's benefits.",
    },
    estimatedMass: {
      type: Type.STRING,
      description: "An estimated mass in kilograms, formatted as a string (e.g., '2.75 kg').",
    },
  },
  required: ["material", "manufacturingProcess", "keyFeatures", "estimatedMass"],
};

export const generateComponentDetails = async (
  objectType: string,
  material: string,
  userPrompt: string
): Promise<GeneratedComponentDetails> => {
  const fullPrompt = `
    As an expert in advanced materials science and space-based manufacturing, generate a concise, futuristic product specification for the following user request.

    User Request:
    - Object Type: ${objectType}
    - Base Material: ${material}
    - Custom Description: "${userPrompt}"

    Based on this, generate a product specification. The key features should emphasize the benefits of manufacturing in a microgravity environment.
  `;

  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: fullPrompt,
      config: {
        responseMimeType: "application/json",
        responseSchema: responseSchema,
        temperature: 0.8,
      },
    });

    const jsonText = response.text.trim();
    const parsedJson = JSON.parse(jsonText);

    // Validate if the parsed object matches the expected structure
    if (
      typeof parsedJson.material === 'string' &&
      typeof parsedJson.manufacturingProcess === 'string' &&
      Array.isArray(parsedJson.keyFeatures) &&
      typeof parsedJson.estimatedMass === 'string'
    ) {
      return parsedJson as GeneratedComponentDetails;
    } else {
      throw new Error("Received malformed JSON from API");
    }

  } catch (error) {
    console.error("Error generating component details:", error);
    throw new Error("Failed to generate details from Gemini API. Please check your prompt and API key.");
  }
};

export const generateComponentImage = async (
  objectType: string,
  material: string,
  userPrompt: string
): Promise<string> => {
  const fullPrompt = `
    Generate a photorealistic, high-quality, cinematic concept image of a "${objectType}", described as "${userPrompt}".
    The object should be made from a material that looks like "${material}".
    It needs to appear futuristic, precisely engineered, and technologically advanced.
    The object should be the central focus, set against a clean, dark, high-tech background that suggests it was manufactured in space. Do not add text or labels to the image.
  `;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [{ text: fullPrompt }],
      },
      config: {
          responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });
    
    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
      }
    }

    throw new Error("No image was generated by the API for the component.");

  } catch (error) {
    console.error("Error generating component image:", error);
    throw new Error("Failed to generate component image from Gemini API.");
  }
};


// FIX: Switched to generateImages API with an appropriate model for image generation from text.
export const generateFoundryImage = async (): Promise<string> => {
  const prompt = `
    A photorealistic, high-quality, cinematic image of a futuristic orbital manufacturing station named 'Orbital Artisan Foundry'.
    The station is in Low Earth Orbit, with the vibrant, detailed curve of the Earth visible below, showing continents and clouds.
    The station itself should be technologically advanced and intricate, featuring solar panel arrays catching the sunlight, visible robotic arms, large manufacturing bays with viewports, and docking ports.
    The lighting should be dramatic and cinematic, with the bright sun illuminating one side of the station and casting long, deep shadows on the other. Stars should be visible in the dark space background.
    The overall mood should be awe-inspiring, clean, and representative of the pinnacle of space engineering and innovation.
  `;

  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: prompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/jpeg',
        aspectRatio: '16:9',
      },
    });

    if (response.generatedImages?.[0]?.image?.imageBytes) {
      const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
      return `data:image/jpeg;base64,${base64ImageBytes}`;
    }

    throw new Error("No image was generated by the API for the foundry background.");

  } catch (error) {
    console.error("Error generating foundry background image:", error);
    throw new Error("Failed to generate foundry background image from Gemini API.");
  }
};